/* Generated By:JavaCC: Do not edit this line. PseudoTokenManager.java */
package parser;
//import java.util.HashMap;
import java.io.FileInputStream;
import java.util.ArrayList;
import javassist.*;
import javassist.bytecode.*;
import compiler.*;
import java.io.File;
import static compiler.Util.*;

/** Token Manager. */
public class PseudoTokenManager implements PseudoConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x100L) != 0L)
            return 6;
         if ((active0 & 0x10802810000000L) != 0L)
         {
            jjmatchedKind = 88;
            return 41;
         }
         if ((active0 & 0xc000000000000000L) != 0L)
            return 10;
         if ((active0 & 0x4f7f93effffff8L) != 0L || (active1 & 0x406L) != 0L)
         {
            jjmatchedKind = 88;
            return 3;
         }
         return -1;
      case 1:
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 1;
            }
            return 40;
         }
         if ((active0 & 0x1a800814000000L) != 0L)
            return 3;
         if ((active0 & 0x457f93ebfffff8L) != 0L || (active1 & 0x406L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 1;
            }
            return 3;
         }
         return -1;
      case 2:
         if ((active0 & 0x597fbbfbffff78L) != 0L || (active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 2;
            return 3;
         }
         if ((active0 & 0x4000000000080L) != 0L || (active1 & 0x6L) != 0L)
            return 3;
         return -1;
      case 3:
         if ((active0 & 0x513fabd8ffff70L) != 0L || (active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 3;
            return 3;
         }
         if ((active0 & 0x8401023000008L) != 0L)
            return 3;
         return -1;
      case 4:
         if ((active0 & 0x1036abd8fffe60L) != 0L || (active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 4;
            return 3;
         }
         if ((active0 & 0x41090000000110L) != 0L)
            return 3;
         return -1;
      case 5:
         if ((active0 & 0x1036ab40fafc60L) != 0L || (active1 & 0x400L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 5;
            }
            return 3;
         }
         if ((active0 & 0x98050200L) != 0L)
            return 3;
         return -1;
      case 6:
         if ((active0 & 0x1032aa40f0e060L) != 0L || (active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
            return 3;
         }
         if ((active0 & 0x401000a1800L) != 0L)
            return 3;
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x32080080a060L) != 0L || (active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 7;
            return 3;
         }
         if ((active0 & 0x1000a240704000L) != 0L)
            return 3;
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 8;
            return 3;
         }
         if ((active0 & 0x12080080a060L) != 0L || (active1 & 0x400L) != 0L)
            return 3;
         if ((active0 & 0x400L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 88;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x200000000000L) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 94);
      case 33:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 99);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 40:
         return jjStopAtPos(0, 70);
      case 41:
         return jjStopAtPos(0, 71);
      case 42:
         return jjStopAtPos(0, 64);
      case 43:
         return jjStartNfaWithStates_0(0, 62, 10);
      case 44:
         return jjStopAtPos(0, 73);
      case 45:
         return jjStartNfaWithStates_0(0, 63, 10);
      case 46:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 47:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 58:
         return jjStopAtPos(0, 80);
      case 59:
         return jjStopAtPos(0, 79);
      case 60:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 75);
      case 93:
         return jjStopAtPos(0, 76);
      case 94:
         return jjStopAtPos(0, 68);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100050040L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0xc2000100L, 0x400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x4L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10802810000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x452200009a8200L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x90000000400L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1008000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x2L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x400000007800L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40020600028L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0xa100200000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000090L, 0x0L);
      case 123:
         return jjStopAtPos(0, 77);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 125:
         return jjStopAtPos(0, 78);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 42:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 61:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x404900c0020088L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x50200L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 3);
         return jjMoveStringLiteralDfa2_0(active0, 0x141020600430L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8008001000000L, active1, 0x4L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x140L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000810000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xa000000L, active1, 0x402L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000008000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100807000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4202000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200080800L, active1, 0L);
      case 124:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 34);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000020000100L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000800L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x12000070010L, active1, 0L);
      case 68:
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 3);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000020L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x209000800040L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 50, 3);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000001008L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40100000000200L, active1, 0L);
      case 77:
      case 109:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 3);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000080000L, active1, 0x400L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40001000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400140008400L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000010200000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x800100000L, active1, 0L);
      case 86:
      case 118:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 3);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000240L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x170190000400L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x804000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8450000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 3);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000800L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000100000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 3);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 3);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 51, 3);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000208020L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 3);
         return jjMoveStringLiteralDfa4_0(active0, 0x1002200000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000100L, active1, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000002000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 90:
      case 122:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 3, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 3);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 3);
         return jjMoveStringLiteralDfa5_0(active0, 0x200001000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100048100000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 3);
         return jjMoveStringLiteralDfa5_0(active0, 0x200800002000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x100008000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20008a0800L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10020080000020L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 4, 3);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 3);
         return jjMoveStringLiteralDfa5_0(active0, 0x50000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 3);
         return jjMoveStringLiteralDfa5_0(active0, 0x10204000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x400200L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x48000000040L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 3);
         return jjMoveStringLiteralDfa6_0(active0, 0x4400L, active1, 0x400L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x10300000000800L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1020L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 3);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000100000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200210000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 3);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 3);
         return jjMoveStringLiteralDfa6_0(active0, 0xa0040L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8800008000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x20040400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x10400L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8800208000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000040000020L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x102000002000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 3);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 3);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 79:
      case 111:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 3);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 3);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 3);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 3);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000400040L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 3);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000020L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x800002400L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000040L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 3);
         break;
      case 79:
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 3);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 3);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 3);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 3);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 3);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 3);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 3);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 3);
         break;
      case 69:
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(8, 10);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 74, 3);
         break;
      case 78:
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 44, 3);
         break;
      case 79:
      case 111:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 6, 3);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 3);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 3);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(8, 35, 3);
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 5, 3);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 45, 3);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(15, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 67;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 40:
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(3);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                     jjCheckNAddStates(6, 12);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 10);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(23, 24);
                  else if (curChar == 39)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 10);
                  break;
               case 5:
                  if (curChar == 46)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(9);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 5);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(12, 13);
                  break;
               case 13:
                  if (curChar != 46)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(14, 7);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(14, 7);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 39)
                     jjAddStates(13, 14);
                  break;
               case 21:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 34 && kind > 91)
                     kind = 91;
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAddStates(6, 12);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(49);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(3);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(3);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(15, 19);
                  else if ((0x2000000020L & l) != 0L)
                     jjAddStates(20, 22);
                  else if ((0x40000000400000L & l) != 0L)
                     jjAddStates(23, 24);
                  else if ((0x200000002000000L & l) != 0L)
                     jjCheckNAdd(0);
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 88)
                        kind = 88;
                     jjCheckNAdd(3);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 0:
                  if ((0x800000008000L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  jjCheckNAdd(3);
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  jjAddStates(29, 30);
                  break;
               case 25:
                  if ((0x40000000400000L & l) != 0L)
                     jjAddStates(23, 24);
                  break;
               case 26:
                  if ((0x1000000010L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 27:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x800000008000L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 32:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(20, 22);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 43:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x200000002L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 46:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 50:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(15, 19);
                  break;
               case 51:
                  if ((0x200000002L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 52:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x100000001000L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 55:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x800000008000L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 57:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x800000008000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 60:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x200000002L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 64:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(29, 30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 67 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 100)
                     kind = 100;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x400000000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   11, 5, 12, 13, 15, 16, 49, 11, 5, 12, 13, 15, 16, 20, 21, 53, 
   55, 58, 62, 66, 41, 44, 47, 30, 38, 8, 9, 17, 18, 23, 24, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\56\56\56", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\75", "\75\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\53", "\55", 
"\52", null, null, "\57", "\136", "\41", "\50", "\51", "\56", "\54", null, "\133", 
"\135", "\173", "\175", "\73", "\72", "\174\174", "\46\46", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT1",
   "IN_SINGLE_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 0, 2, 
   0, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xf87ffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x14f0000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x1000000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x2b00000000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[67];
static private final int[] jjstateSet = new int[134];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public PseudoTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public PseudoTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 67; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 97)
         {
            jjmatchedKind = 97;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 101)
         {
            jjmatchedKind = 101;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 94 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           Errors.newLine();
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
