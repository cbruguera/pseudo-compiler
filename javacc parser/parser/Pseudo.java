/* Generated By:JavaCC: Do not edit this line. Pseudo.java */
package parser;

//import java.util.HashMap;
import java.io.FileInputStream;
import java.util.ArrayList;
import javassist.*;
import javassist.bytecode.*;
import compiler.*;
import java.io.File;

import static compiler.Util.*;


public class Pseudo implements PseudoConstants {
    public static String[] compilerArguments;

    public static void main (String[] args) throws Exception {

        File fl = new File("InitClass.class");
        if(fl.exists()){
            fl.delete();
        }

        classPool = ClassPool.getDefault();         //pool de clases general
        declaredTypes = new TypeTable();            //tabla de tipos declarados
        registryList = new ArrayList<CtClass>();    //tabla de registros definidos
        pendingTypes = new ArrayList<String>();     //Lista de tipos pendientes por definir (para referencias adelantadas)

        if(args.length == 0){
            System.out.println("Debe especificar el nombre del archivo fuente");
            return;
        }

        Pseudo analizer = new Pseudo(new FileInputStream(args[0]));
        String currentFile = "";
        String currentPhase = "";

        try{
            // Recorre todos los archivos para borrar las clases ya existentes
            for(int i = 0; i < args.length; i++){
                if(i > 0){
                    FileInputStream input = new FileInputStream(args[i]);
                    analizer.ReInit(input);
                }

                analizer.deleteClassFiles();
            }

            // Recorre la lista de archivos para pre-procesar
            currentPhase = "preprocesamiento";
            for(int i = 0; i < args.length; i++){

                currentFile = args[i];
                System.out.println("Preprocesando: " + args[i]);

                FileInputStream input = new FileInputStream(args[i]);
                analizer.ReInit(input);

                if(i + 1 < args.length){
                    analizer.pre_lClases();
                }else{
                    analizer.pre_axiom();
                }

                if(Errors.getCount() > 0){
                    System.out.println("Se han encontrado " + Errors.getCount() + " errores");
                    break;  // Si un archivo contiene errores, detiene todo el análisis
                }

                System.out.println("");
            }


            // Si no hubo errores, recorre nuevamente la lista de archivos para compilar
            if(Errors.getCount() == 0){
                currentPhase = "Compilaci\u00c3\u00b3n";
                for(int i = 0; i < args.length; i++){
                    currentFile = args[i];
                    System.out.println("Compilando: " + args[i]);


                    FileInputStream input = new FileInputStream(args[i]);
                    analizer.ReInit(input);

                    if(i + 1 < args.length){
                        analizer.lClases();
                    }else{
                        analizer.axiom();
                    }

                    if(Errors.getCount() > 0){
                        System.out.println("Se han encontrado " + Errors.getCount() + " errores");
                        break;
                    }
                    System.out.println("");
                }
            }
        }catch(Exception e){
            Errors.add("Ocurri\u00c3\u00b3 un error (" + e.toString() + ") durante la fase de " + currentPhase +
                " en el archivo " + currentFile, getToken(0));
                e.printStackTrace();
        }

        if (Errors.getCount() == 0){
            System.out.println("Compilaci\u00c3\u00b3n exitosa");
            System.out.println("0 errores encontrados");
        }


        /** Bloque de prueba **

            ClassFile initClass = getOrCreateClass("InitClass");
            initClass.setAccessFlags(AccessFlag.STATIC);
            declaring = initClass;
            globalScope = new Scope();
            currentScope = globalScope;
            ClassFile blah = analizer.clase();
            writeFile(blah);

        /**********/
    }

  static final public void axiom() throws ParseException {
    if(debug){
        System.out.println("axiom() --> ");
    }
    label_1:
    while (true) {
      if (jj_2_1(10)) {
        ;
      } else {
        break label_1;
      }
      dclTipo();
    }
    if (jj_2_2(10)) {
      lClases();
    } else {
      ;
    }
    ini();
    jj_consume_token(0);
  }

  static final public void lClases() throws ParseException {
    if(debug){
        System.out.println("lClases() --> ");
    }

    ClassFile unaClase;
    label_2:
    while (true) {
      unaClase = clase();
            if(Errors.getCount() == 0){
                writeFile(unaClase);
            }
      if (jj_2_3(10)) {
        ;
      } else {
        break label_2;
      }
    }
  }

  static final public ClassFile clase() throws ParseException {
    if(debug){
        System.out.println("clase() --> ");
    }

    ClassFile nuevaClase;
    String nombre = new String();
    String nombreSuper = new String("");
    Bytecode atributosInit;
    ArrayList<MethodInfo> metodos = new ArrayList<MethodInfo>();
    Token tok;
    currentScope = new Scope();
    jj_consume_token(TClase);
    tok = jj_consume_token(id);
                          if(debug) System.out.println("\u005c"" + tok.image +"\u005c" ");
      nombre = new String(tok.image);
    if (jj_2_4(10)) {
      nombreSuper = herencia();
    } else {
      ;
    }
        nuevaClase = getClassFile(nombre);
        declaring = nuevaClase;

        atributosInit = new Bytecode(declaring.getConstPool());

        if(!nombreSuper.equals(""))
        {
            ClassFile superClass = getClassFile(nombreSuper);
            try{
                nuevaClase.setSuperclass(superClass.getName());
            }catch(CannotCompileException e){
                Errors.add("No se consigui\u00c3\u00b3 la superclase \u005c"" + nombreSuper
                        + "\u005c" (" + e.getMessage() + ")", getToken(0));
            }
        }
    if (jj_2_5(10)) {
      atributosInit = atributos();
    } else {
      ;
    }
    if (jj_2_6(10)) {
      metodos = metodos();
    } else {
      ;
    }
    jj_consume_token(TFClase);
        boolean hasConstructor = false;

        for(MethodInfo method : metodos){
            if (nuevaClase.getName().equals(method.getName())) {
                // Si el método es un constructor

                CtClass superclass;
                hasConstructor = true;

                method.setName("<init>");
                Bytecode init = new Bytecode(declaring.getConstPool());
                init.addAload(0);

                try {
                    if (nuevaClase.getSuperclass().equals("")) {
                        superclass = classPool.get("java.lang.Object");
                    } else {
                        superclass = classPool.get(nuevaClase.getSuperclass());
                    }

                    init.addInvokespecial(superclass, MethodInfo.nameInit, "()V");

                } catch (NotFoundException nf) {
                    //FATAL: esto no debería ocurrir
                    Errors.add("FATAL: Clase java.lang.Object no encontrada. " +
                        "Error en m\u00c3\u00a1quina virtual de Java");
                }

                atributosInit = append(init, atributosInit);

                // Concatena el código de la inicialización "estática" con el 
                // código del constructor
                CodeAttribute initCodeAttribute = append(atributosInit.get(),
                        method.getCodeAttribute().getCode()).toCodeAttribute();

                try {
                    initCodeAttribute.setMaxLocals(currentScope.getMaxLocals());
                    initCodeAttribute.computeMaxStack();
                } catch (BadBytecode bb) {


                    //Errors.add("FATAL (BadBytecode): Error al calcular el tamano de pila del" + 
                    //"inicializador estático", getToken(0));

                    System.out.println("\u005cnBAD BYTECODE (init)");
                    System.out.println("getMessage() --> " + bb.getMessage());
                }

                method.setCodeAttribute(initCodeAttribute);
                method.setAccessFlags(AccessFlag.PUBLIC);
            }
        }

        if (!hasConstructor) {
            //Si no tiene constructor declarado, añade uno.
            addClassConstructor(nuevaClase, atributosInit);
        }

        currentScope = currentScope.destroyChild();

        declaring = null;
        {if (true) return nuevaClase;}
    throw new Error("Missing return statement in function");
  }

  static final public String herencia() throws ParseException {
    if(debug) {
        System.out.println("herencia() --> ");
    }

    Token tok;
    jj_consume_token(TExtends);
    tok = jj_consume_token(id);
                            if(debug) System.out.println("\u005c"" + tok.image +"\u005c" ");
        {if (true) return tok.image;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode atributos() throws ParseException {
    if(debug){
        System.out.println("atributos() --> ");
    }

    Bytecode result = new Bytecode(declaring.getConstPool());
    Bytecode bc = new Bytecode(declaring.getConstPool());
    label_3:
    while (true) {
      bc = attribDcl();
        result = append(result, bc);
      if (jj_2_7(10)) {
        ;
      } else {
        break label_3;
      }
    }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode attribDcl() throws ParseException {
    if(debug){
        System.out.println("attribDcl() --> ");
    }

    int access = AccessFlag.PUBLIC;
    ArrayList<String> ids;
    CtClass tipo;
    ArrayList<FieldInfo> campos = new ArrayList<FieldInfo>();
    Bytecode dclInit = new Bytecode(declaring.getConstPool());
    if (jj_2_8(10)) {
      access = acceso();
    } else {
      ;
    }
    dclInit = dcl(Variable.FIELD, access);
    jj_consume_token(TSemicolon);
        {if (true) return dclInit;}
    throw new Error("Missing return statement in function");
  }

  static final public int acceso() throws ParseException {
    if(debug) {
        System.out.println("acceso() --> ");
    }

    Token tok;
    if (jj_2_9(10)) {
      tok = jj_consume_token(TPublico);
                            {if (true) return AccessFlag.PUBLIC;}
    } else if (jj_2_10(10)) {
      tok = jj_consume_token(TPrivado);
                           {if (true) return AccessFlag.PRIVATE;}
    } else if (jj_2_11(10)) {
      tok = jj_consume_token(TProtegido);
                           {if (true) return AccessFlag.PROTECTED;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      if(debug) System.out.println("\u005c"" + tok.image +"\u005c" ");
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList metodos() throws ParseException {
    if(debug) {
        System.out.println("metodos() --> ");
    }

    ArrayList<MethodInfo> metodos = new ArrayList<MethodInfo>();
    int access = AccessFlag.PUBLIC;
    MethodInfo metodo;
    label_4:
    while (true) {
      if (jj_2_14(10)) {
        if (jj_2_12(10)) {
          access = acceso();
        } else {
          ;
        }
        metodo = funcion(access);
      } else if (jj_2_15(10)) {
        if (jj_2_13(10)) {
          access = acceso();
        } else {
          ;
        }
        metodo = accion(access);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        metodos.add(metodo);
      if (jj_2_16(10)) {
        ;
      } else {
        break label_4;
      }
    }
        {if (true) return metodos;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodInfo funcion(int accessFlags) throws ParseException {
    if(debug) System.out.println("funcion(" + accessFlags + ") --> ");

    CodeAttribute code;
    MethodInfo mInfo;
    byte[] bytes;
    Method function;
    String desc;
    mInfo = funcionIni(accessFlags);
    code = funcionFin();
        try{
            code.computeMaxStack();
        }catch(BadBytecode bb){
            /*Errors.add("Error al calcular el tamano de pila de la funcion" 
                    + mInfo.getName() + mInfo.getDescriptor(), getToken(0));*/
            System.out.println("BAD BYTECODE (" + mInfo.getName() + "):");
            System.out.println(bb.getMessage());
           // printBytecode(code);
        }

        mInfo.setCodeAttribute(code);

        {if (true) return mInfo;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodInfo funcionIni(int accessFlags) throws ParseException {
    if(debug) System.out.println("funcionIni(" + accessFlags + ") --> ");

    MethodInfo unaFuncion = null;
    Parametro parametros[] = new Parametro[0];
    Token tok;
    CtClass tipo;
    CtClass[] paramTypes = new CtClass[0];
    Method methodSymbol;
    jj_consume_token(TFuncion);
    tok = jj_consume_token(id);
                             if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
    jj_consume_token(LOpenBracket);
    parametros = listaParam();
    jj_consume_token(ROpenBracket);
    jj_consume_token(TColon);
    tipo = tipoGeneral();
        int paramCount = parametros.length;
        paramTypes = new CtClass[paramCount];

        for(int i = 0; i < paramCount; i++){
            paramTypes[i] = parametros[i].getType();
        }

        String desc = Descriptor.ofParameters(paramTypes);
        methodSymbol = new Method(tok.image, tipo, accessFlags, paramTypes);    // son necesarios los method symbols?????????????????????????

        if(currentScope.add(methodSymbol)){
            unaFuncion = declaring.getMethod(tok.image);
            unaFuncion.setDescriptor(methodSymbol.getDescriptor());
            unaFuncion.setAccessFlags(accessFlags);

            declaringMethod = methodSymbol;
        }else{
            Errors.add("Definicion duplicada para la funci\u00c3\u00b3n " + tok.image + desc, getToken(0));
        }

        // Crea el nuevo ámbito para el cuerpo del procedimiento 
        // (el nuevo ámbito incluye a los parámetros como variables locales)
        currentScope = currentScope.createChild();

        if((accessFlags & 8) == 0){
            // Si el método NO es estático, incrementa el contador
            // (porque utilizaría la referencia 0 para "this")
            currentScope.increaseIndexCount(1);
        }

        if(!currentScope.addVariables(parametros)){
            Errors.add("Parametro con nombre duplicado", getToken(0));
        }
        {if (true) return unaFuncion;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeAttribute funcionFin() throws ParseException {
    if(debug) System.out.println("funcionFin() --> ");

    Bytecode code;
    CodeAttribute cattr;
    code = bloqueIns();
    jj_consume_token(TFFuncion);
        cattr = code.toCodeAttribute();
        cattr.setMaxLocals(currentScope.getMaxLocals());
        currentScope = currentScope.destroyChild();

        {if (true) return cattr;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodInfo accion(int accessFlags) throws ParseException {
    if(debug){
        System.out.println("accion(" + accessFlags + ") --> ");
    }

    CodeAttribute code;
    MethodInfo mInfo;
    mInfo = accionIni(accessFlags);
    code = accionFin();
        try{
            code.computeMaxStack();
        }catch(BadBytecode bb){
            /*Errors.add("FATAL (BadBytecode): Error al calcular el tamano de pila de la accion" 
                        + mInfo.getName() + mInfo.getDescriptor(), getToken(0));*/

            System.out.println("Error en bytecode: (accion )" + mInfo.getName()
                    + mInfo.getDescriptor());
            System.out.println(bb.getMessage());
          //  printBytecode(code);
        }

        mInfo.setCodeAttribute(code);

        {if (true) return mInfo;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodInfo accionIni(int accessFlags) throws ParseException {
    if(debug) System.out.println("accionIni(" + accessFlags + ") --> ");

    MethodInfo unaAccion = null;
    String nombre;
    Parametro[] parametros = new Parametro[0];
    CtClass[] paramTypes;
    Token tok;
    Method methodSymbol;
    jj_consume_token(TAccion);
    tok = jj_consume_token(id);
                           if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
    jj_consume_token(LOpenBracket);
    parametros = listaParam();
    jj_consume_token(ROpenBracket);
        nombre = tok.image;

        int paramCount = parametros.length;
        paramTypes = new CtClass[paramCount];

        for(int i = 0; i < paramCount; i++){
            paramTypes[i] = parametros[i].getType();
        }

        String desc = Descriptor.ofParameters(paramTypes);

        methodSymbol = new Method(nombre, CtClass.voidType, accessFlags, paramTypes);

        if(currentScope.add(methodSymbol)){
            unaAccion = declaring.getMethod(nombre);
            unaAccion.setDescriptor(Descriptor.ofMethod(CtClass.voidType, paramTypes));
            unaAccion.setAccessFlags(accessFlags);

            declaringMethod = methodSymbol;

        }else{
            Errors.add("Definicion duplicada para acci\u00c3\u00b3n " + nombre + desc, getToken(0));
        }

        // Crea el nuevo ámbito para el cuerpo del procedimiento 
        // (el nuevo ámbito incluye a los parámetros como variables locales)
        currentScope = currentScope.createChild();

        if((accessFlags & 8) == 0){
            // Si el método NO es estático, incrementa el contador
            // (porque utilizaría la referencia 0 para "this")
            currentScope.increaseIndexCount(1);
        }

        if(!currentScope.addVariables(parametros)){
            Errors.add("Parametro con nombre duplicado", getToken(0));
        }

        {if (true) return unaAccion;}
    throw new Error("Missing return statement in function");
  }

  static final public CodeAttribute accionFin() throws ParseException {
    if(debug) System.out.println("accionFin() --> ");
    CodeAttribute cattr;
    Bytecode code;
    code = bloqueIns();
    jj_consume_token(TFAccion);
        code.addReturn(CtClass.voidType);
        cattr = code.toCodeAttribute();
        cattr.setMaxLocals(currentScope.getMaxLocals());
        currentScope = currentScope.destroyChild();

        {if (true) return cattr;}
    throw new Error("Missing return statement in function");
  }

  static final public void ini() throws ParseException {
    if(debug)   System.out.println("ini() --> ");

    CodeAttribute mainCode;
    ClassFile initClass = getClassFile("InitClass");
    //initClass.setAccessFlags(AccessFlag.STATIC);
    declaring = initClass;
    globalScope = new Scope();
    currentScope = globalScope;
    CtClass[] initParams = new CtClass[0];
    Bytecode dclCode = new Bytecode(declaring.getConstPool());
    jj_consume_token(TPrograma);
    dclCode = dcls(Variable.STATIC);
    mainCode = prog();
    jj_consume_token(TFPrograma);
        MethodInfo mainMethod = new MethodInfo(initClass.getConstPool(), "main",
                "([Ljava/lang/String;)V");
        MethodInfo constructorInit = new MethodInfo(initClass.getConstPool(),
                MethodInfo.nameClinit, "()V");

        dclCode.add(Bytecode.RETURN);
        CodeAttribute initCode = dclCode.toCodeAttribute();
        initCode.setMaxLocals(currentScope.getMaxLocals());

        try{
            mainCode.computeMaxStack();
            initCode.computeMaxStack();
        }catch(BadBytecode bb){
            /*Errors.add("FATAL (BadBytecode): Error al calcular el tamano de pila del" + 
                    "metodo principal", getToken(0));*/
            System.out.println("BAD BYTECODE (main)");
            System.out.println(bb.getMessage());
           // printBytecode(mainCode);
        }

        constructorInit.setCodeAttribute(initCode);
        mainMethod.setCodeAttribute(mainCode);

        mainMethod.setAccessFlags(AccessFlag.setPublic(AccessFlag.STATIC));
        declaringMethod = new Method("main", "([Ljava/lang/String;)V");

        try{
            initClass.addMethod(mainMethod);
            initClass.addMethod(constructorInit);
        }catch(DuplicateMemberException e){
            Errors.add("Error en \u005c"Accion Principal\u005c" (" + e.getMessage() + ")", getToken(0));
        }

        writeFile(initClass);
  }

  static final public Bytecode dcls(int varForm) throws ParseException {
    if(debug){
        System.out.println("dcls(" + varForm + ") --> ");
    }

    Bytecode bc = new Bytecode(declaring.getConstPool());
    Bytecode result = new Bytecode(declaring.getConstPool());
    label_5:
    while (true) {
      if (jj_2_17(10)) {
        ;
      } else {
        break label_5;
      }
      bc = dcl(varForm, AccessFlag.PUBLIC);
      jj_consume_token(TSemicolon);
        // concatena el bytecode de inicialización de cada variable
        result = append(result, bc);
    }
    label_6:
    while (true) {
      if (jj_2_18(10)) {
        ;
      } else {
        break label_6;
      }
      dclFun(AccessFlag.STATIC);
    }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public void dclTipo() throws ParseException {
    if(debug){
        System.out.println("dclTipo() --> ");
    }
    if (jj_2_19(10)) {
      registro();
    } else if (jj_2_20(10)) {
      alias();
      jj_consume_token(TSemicolon);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public CodeAttribute prog() throws ParseException {
    if(debug){
        System.out.println("prog() --> ");
    }

    Bytecode bloque = new Bytecode(declaring.getConstPool());
    CodeAttribute attr = null;  // "null" sólo para inicializar

    currentScope = currentScope.createChild();
    currentScope.setIndexCount(1);
    currentScope.setMaxLocals(1);

    Parametro[] parametros = new Parametro[0];
    int paramCount = 0;
    jj_consume_token(TAccionPrincipal);
    if (jj_2_21(10)) {
      jj_consume_token(LOpenBracket);
      jj_consume_token(ROpenBracket);
    } else {
      ;
    }
    bloque = bloqueIns();
    jj_consume_token(TFAccion);
        bloque.addReturn(CtClass.voidType);
        attr = bloque.toCodeAttribute();
        attr.setMaxLocals(currentScope.getMaxLocals());
        currentScope = currentScope.destroyChild();
        {if (true) return attr;}
    throw new Error("Missing return statement in function");
  }

  static final public void dclFun(int accessFlags) throws ParseException {
    if(debug){
        System.out.println("dclFun(" + accessFlags + ") --> ");
    }

    MethodInfo mt;
    if (jj_2_22(10)) {
      mt = funcion(accessFlags);
    } else if (jj_2_23(10)) {
      mt = accion(accessFlags);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public Bytecode retorno() throws ParseException {
    if(debug) System.out.println("retorno() --> ");

    Expresion expr;
    int instr = Bytecode.NOP;
    Bytecode result = new Bytecode(declaring.getConstPool());
    String desc;
    jj_consume_token(TRetornar);
    expr = exp();
        desc = Descriptor.of(declaringMethod.getType());

        if(!desc.equals(expr.getTypeDescriptor())){
            Errors.add("La funcion \u005c"" + declaringMethod.getName() +
                    "\u005c" retorna un valor de tipo invalido. Se esperaba: "
                    + desc + ". Se encontro: " + expr.getTypeDescriptor(), getToken(0));
        }

        if(desc.equals("J")){
            instr = Bytecode.LRETURN;
        }else if(desc.equals("I")){
            instr = Bytecode.IRETURN;
        }else if(desc.equals("Z")){
            instr = Bytecode.IRETURN;
        }else if(desc.equals("C")){
            instr = Bytecode.IRETURN;
        }else if(desc.equals("D")){
            instr = Bytecode.DRETURN;
        }else if(desc.equals("F")){
            instr = Bytecode.FRETURN;
        }else if(desc.charAt(0) == 'L'){
            instr = Bytecode.ARETURN;
        }else if(desc.charAt(0) == '['){
            instr = Bytecode.ARETURN;
        }else if(desc.equals("V")){
            instr = Bytecode.RETURN;
        }else {
            Errors.add("Tipo invalido de retorno: " + desc, getToken(0));
        }

        expr.add(instr);
        {if (true) return expr.getCode();}
    throw new Error("Missing return statement in function");
  }

  static final public Parametro[] listaParam() throws ParseException {
    if(debug) System.out.println("listaParam() --> ");

    ArrayList<Parametro> buffer = new ArrayList<Parametro>();
    Parametro aux;
    if (jj_2_25(10)) {
      aux = parametro();
            buffer.add(aux);
      label_7:
      while (true) {
        if (jj_2_24(10)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(TComma);
        aux = parametro();
                buffer.add(aux);
      }
    } else {
      ;
    }
        {if (true) return buffer.toArray(new Parametro[0]);}
    throw new Error("Missing return statement in function");
  }

  static final public Parametro parametro() throws ParseException {
    if(debug) System.out.println("parametro() --> ");

    CtClass tipo;
    Token tok;
    Parametro param;
    int count = 0;
    tipo = tipoGeneral();
    tok = jj_consume_token(id);
                                      if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
        param = new Parametro(tipo, tok.image);
        {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion llamadaProc() throws ParseException {
    if(debug) System.out.println("llamadaProc() --> ");

    Variable var = new Variable();
    var = varRefChain();
        if(var.isFunctionCall()){
            {if (true) return var.makeExpresion();}
        }
        else{
            Errors.add(var.getName() + " no es un procedimiento invocable",
                    getToken(0));
            {if (true) return new Expresion();}
        }
    throw new Error("Missing return statement in function");
  }

  static final public Expresion llamada(Variable obj) throws ParseException {
    if(debug) System.out.println("llamada(" + ((obj == null)? "null" : obj.getName()) + ") --> ");

    Expresion[] argumentos = new Expresion[0];
    ArrayList<CtClass> typeList = new ArrayList<CtClass>();
    CtClass[] typeArray;
    Expresion call = new Expresion();
    Method meth;
    Token tok;
    String desc;
    tok = jj_consume_token(id);
                 if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
    jj_consume_token(LOpenBracket);
    if (jj_2_26(10)) {
      argumentos = args();
    } else {
      ;
    }
    jj_consume_token(ROpenBracket);
        for(Expresion arg : argumentos) {
            typeList.add(arg.getType());
        }

        typeArray = typeList.toArray(new CtClass[0]);
        desc = Descriptor.ofParameters(typeArray);

        if(obj == null){
            meth = currentScope.getMethod(tok.image, desc);
            if(meth != null){
                call = meth.getCallExpresion(argumentos);
            }else{
                Errors.add("Llamada a procedimiento desconocido: " + tok.image, getToken(0));
            }
        }else{

            Method method = obj.getMethod(tok.image, typeArray);

            if(method != null){
                call = method.getCallExpresion(obj, argumentos);
            }else{
                Errors.add("No se pudo conseguir el metodo '" + tok.image + "' en la clase "
                                                + obj.getType().getName(), getToken(0));
            }
        }

        {if (true) return call;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion[] args() throws ParseException {
    if(debug) System.out.println("args() --> ");

    Expresion allArgs;
    Expresion buff;
    ArrayList<Expresion> arr = new ArrayList<Expresion>();
    Expresion expr;
    int count = 0;
    expr = exp();
        arr.add(expr);
    label_8:
    while (true) {
      if (jj_2_27(10)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(TComma);
      expr = exp();
        arr.add(expr);
    }
        {if (true) return arr.toArray(new Expresion[0]);}
    throw new Error("Missing return statement in function");
  }

  static final public void registro() throws ParseException {
    if(debug) System.out.println("registro() --> ");

    Token tok;
    ClassFile registryClass;
    currentScope = new Scope();

    Bytecode initCode = new Bytecode(declaring.getConstPool());;
    jj_consume_token(TRegistro);
    tok = jj_consume_token(id);
                             if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
        registryClass = getClassFile(tok.image);
        declaring = registryClass;

        if (registryClass == null){
            Errors.add("Error en la declaraci\u00c3\u00b3n de registro: " + tok.image, getToken(0));
        }
    if (jj_2_28(10)) {
      jj_consume_token(TEq);
    } else {
      ;
    }
    initCode = registroIn();
    jj_consume_token(TFRegistro);
        addClassConstructor(registryClass, initCode);

        declaring = null;
        currentScope = null;
        writeFile(registryClass);
  }

  static final public Bytecode registroIn() throws ParseException {
    if(debug) System.out.println("registroIn() --> ");

    Bytecode code = new Bytecode(declaring.getConstPool());
    Bytecode buff = new Bytecode(declaring.getConstPool());
    label_9:
    while (true) {
      buff = dcl(Variable.FIELD, AccessFlag.PUBLIC);
      jj_consume_token(TSemicolon);
            code = append(code, buff);
      if (jj_2_29(10)) {
        ;
      } else {
        break label_9;
      }
    }
        {if (true) return code;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode bloqueIns() throws ParseException {
    if(debug) System.out.println("bloqueIns() --> ");

    Bytecode resultCode = new Bytecode(declaring.getConstPool());
    Bytecode buffer;
    label_10:
    while (true) {
      if (jj_2_30(10)) {
        ;
      } else {
        break label_10;
      }
      buffer = ins();
            resultCode = append(resultCode, buffer);
    }
        if (resultCode.length() == 0){
            resultCode.add(Bytecode.NOP);
        }
        {if (true) return resultCode;}
    throw new Error("Missing return statement in function");
  }

  static final public void alias() throws ParseException {
    if(debug) System.out.println("alias() --> ");

    Token tok;
    CtClass tipo;
    jj_consume_token(TTipo);
    tipo = tipoBase();
    jj_consume_token(TComo);
    tok = jj_consume_token(id);
                                                   if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");

  }

  static final public Bytecode ins() throws ParseException {
    if(debug) System.out.println("ins() --> ");

    Bytecode code = new Bytecode(declaring.getConstPool());
    if (jj_2_31(10)) {
      code = dcl(Variable.LOCAL, 0);
      jj_consume_token(TSemicolon);
    } else if (jj_2_32(10)) {
      code = insSimple();
      jj_consume_token(TSemicolon);
    } else if (jj_2_33(10)) {
      code = insEstruc();
    } else if (jj_2_34(10)) {
      code = retorno();
      jj_consume_token(TSemicolon);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return code;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode dcl(int varForm, int access) throws ParseException {
    if(debug) System.out.println("dcl(" + varForm + "," + access + ") --> ");

    Bytecode bc = new Bytecode(declaring.getConstPool());
    if (jj_2_35(10)) {
      bc = varDcl(varForm, access);
    } else if (jj_2_36(10)) {
      bc = arreglo(varForm, access);
    } else if (jj_2_37(10)) {
      bc = subrango(varForm, access);
    } else if (jj_2_38(10)) {
      bc = enumerado(varForm, access);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return bc;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode varDcl(int varForm, int access) throws ParseException {
    if(debug) {
        System.out.println("varDcl(" + varForm + "," + access + ") --> ");
    }

    ArrayList<String> lista;
    CtClass tipo;
    Token tok;
    Expresion value;
    FieldInfo campo;
    Bytecode bc = new Bytecode(declaring.getConstPool());
    boolean isConstant = false;
    if (jj_2_40(10)) {
      tipo = tipoBase();
      if (jj_2_39(10)) {
        jj_consume_token(TConstante);
                                     isConstant = true;
      } else {
        ;
      }
      tok = jj_consume_token(id);
      jj_consume_token(TEq);
      value = exp();
        Variable var = new Variable(tok.image, tipo, varForm);
        var.setConstant(isConstant);

        if(!currentScope.add(var)){
                Errors.add("Declaracion multiple para la variable \u005c"" + tok.image + "\u005c" ",
                    getToken(0));
        }else{
            if(compatibleTypes(var.getType(), value.getType())){

                if(varForm == Variable.STATIC || varForm == Variable.FIELD){
                    addClassField(var, varForm, access);
                }

                /*if(varForm == Variable.FIELD){
                    bc.addAload(0);
                    value.preAppendCode(bc);
                }*/

                value.preAppendCode(var.getPreStoreCode());
                value.appendCode(var.getStoreCode());
            }else{
                Errors.add("Asignaci\u00c3\u00b3n de tipo incompatible para \u005c"" + var.getName() +
                    "\u005c"\u005cnSe esperaba: "+Descriptor.of(var.getType()) + "\u005cnEncontro: " +
                    Descriptor.of(value.getType()), getToken(0));
            }
        }
        {if (true) return value.getCode();}
    } else if (jj_2_41(10)) {
      tipo = tipoBase();
      lista = listaIds();
        for(String unId : lista){

            Variable var = new Variable(unId, tipo, varForm);

            if(!currentScope.add(var)){
                Errors.add("Declaracion multiple para la variable \u005c"" + unId + "\u005c"", getToken(0));
            }else{
                //si el tipo es registro, instanciar la clase de una vez..
                if(isRegistry(tipo)){
                    bc = append(bc, var.getPreStoreCode());
                    bc = append(bc, getInstantiationCode(tipo));
                    bc = append(bc, var.getStoreCode());
                }

                if(varForm == Variable.STATIC || varForm == Variable.FIELD){
                    addClassField(var, varForm, access);
                }
            }
        }
        {if (true) return bc;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public CtClass tipoGeneral() throws ParseException {
    if(debug) System.out.println("tipoGeneral() --> ");
    CtClass t;
    if (jj_2_42(10)) {
      t = tipoArreglo();
    } else if (jj_2_43(10)) {
      t = tipoBase();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public CtClass tipoBase() throws ParseException {
    if(debug) System.out.println("tipoBase() --> ");

    Token tok;
    if (jj_2_44(10)) {
      tok = jj_consume_token(id);
        CtClass t = declaredTypes.get(tok.image);
        if(t != null){
            {if (true) return t;}
        }else{
            /*Errors.add("Error al obtener el tipo \"" + tok.image + "\"", getToken(0));
            return CtClass.voidType;*/
            // Se pre-declara el tipo para permitir referencias adelantadas

            createClass(tok.image);
            try{
                declaredTypes.add(tok.image, classPool.get(tok.image));
            }catch(NotFoundException nf){
                Errors.add("Error al crear clase: " + tok.image, getToken(0));
            }
            pendingTypes.add(tok.image);
        }
    } else if (jj_2_45(10)) {
      tok = jj_consume_token(TLogico);
                            if(debug) System.out.println("\u005c"" + tok.image +"\u005c" ");
         {if (true) return CtClass.booleanType;}
    } else if (jj_2_46(10)) {
      tok = jj_consume_token(TEntero);
                            if(debug) System.out.println("\u005c"" + tok.image +"\u005c" ");
         {if (true) return INTEGER_TYPE;}
    } else if (jj_2_47(10)) {
      tok = jj_consume_token(TReal);
                            if(debug) System.out.println("\u005c"" + tok.image +"\u005c" ");
         {if (true) return FLOAT_TYPE;}
    } else if (jj_2_48(10)) {
      tok = jj_consume_token(TCaracter);
                            if(debug) System.out.println("\u005c"" + tok.image +"\u005c" ");
         {if (true) return CtClass.charType;}
    } else if (jj_2_49(10)) {
      tok = jj_consume_token(TCadena);
                          if(debug) System.out.println("\u005c"" + tok.image +"\u005c" ");
        try{
            {if (true) return classPool.get("java.lang.String");}
        }catch(NotFoundException e){
            Errors.add("FATAL: Error al cargar la clase java.lang.String", getToken(0));
            e.printStackTrace();
        }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public CtClass tipoArreglo() throws ParseException {
    if(debug) System.out.println("tipoArreglo() --> ");
    CtClass base;
    CtClass eltipo = CtClass.voidType;
    int dim = 0;
    base = tipoBase();
    label_11:
    while (true) {
      jj_consume_token(LClosedBracket);
      jj_consume_token(RClosedBracket);
            dim = dim + 1;
      if (jj_2_50(10)) {
        ;
      } else {
        break label_11;
      }
    }
        try{
            eltipo = Descriptor.toCtClass(getArrayDescriptor(dim, base), classPool);
        }catch(NotFoundException nf){
            Errors.add("FATAL: Error al cargar clase con descriptor " +
                    getArrayDescriptor(dim, base) + " (" + nf.getMessage() + ")", getToken(0));
        }

        {if (true) return eltipo;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<String> listaIds() throws ParseException {
    if(debug) System.out.println("listaIds() --> ");

    String[] arr;
    ArrayList<String> buff = new ArrayList<String>();
    int count = 0;
    Token tok;
    tok = jj_consume_token(id);
                 if(debug) System.out.println("\u005c"" + tok.image +"\u005c" ");
        count = 1; buff.add(tok.image);
    label_12:
    while (true) {
      if (jj_2_51(10)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(TComma);
      tok = jj_consume_token(id);
                              if(debug) System.out.println("\u005c"" + tok.image +"\u005c" ");
            count++; buff.add(tok.image);
    }
        {if (true) return buff;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode arreglo(int varForm, int access) throws ParseException {
    if(debug) System.out.println("arreglo(" + varForm + "," + access + ") --> ");

    CtClass tipo = CtClass.voidType;
    Token tok;
    Expresion constr = new Expresion();
    ArrayList<Expresion> dimensions;
    Arreglo var = new Arreglo();
    if (jj_2_52(10)) {
      jj_consume_token(TArreglo);
      tok = jj_consume_token(id);
                              if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
      jj_consume_token(TDe);
      tipo = tipoBase();
      dimensions = dclDimension();
        var = new Arreglo(tok.image, tipo, varForm, dimensions.toArray(new Expresion[0]));
    } else if (jj_2_53(10)) {
      jj_consume_token(TArreglo);
      tok = jj_consume_token(id);
                             if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
      jj_consume_token(TDe);
      tipo = tipoBase();
      jj_consume_token(TEq);
      constr = arregloConstr(tipo);
        var = new Arreglo(tok.image, tipo, varForm);

        if(!Descriptor.of(constr.getType()).equals("V")){
            var.setType(constr.getType());
        }

        var.setInitCode(constr.getCode());
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (!currentScope.add(var)) {
            Errors.add("Declaracion multiple para la variable \u005c"" + var.getName() + "\u005c"", getToken(0));
        } else {

            if(varForm == Variable.FIELD || varForm == Variable.STATIC){
                addClassField(var, varForm, access);
            }

            if(varForm == Variable.FIELD){
                Bytecode thisBc = new Bytecode(declaring.getConstPool());
                thisBc.addAload(0);

                var.setInitCode(append(thisBc, var.getInitCode()));
            }

            var.setInitCode(append(var.getInitCode(), var.getStoreCode()));

            if(isRegistry(tipo)){

                Bytecode registryInit = getRegistryArrayInitCode(tipo, var);
                var.setInitCode(append(var.getInitCode(), registryInit));
            }
        }

        {if (true) return  var.getInitCode();}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Expresion> dclDimension() throws ParseException {
    if(debug) System.out.println("dclDimension() --> ");

    Expresion expr;
    ArrayList<Expresion> dimensions = new ArrayList<Expresion>();
    label_13:
    while (true) {
            expr = new Expresion(INTEGER_TYPE);
            expr.getCode().addIconst(0);
      jj_consume_token(LClosedBracket);
      if (jj_2_54(10)) {
        expr = exp();
      } else {
        ;
      }
      jj_consume_token(RClosedBracket);
            dimensions.add(expr);
      if (jj_2_55(10)) {
        ;
      } else {
        break label_13;
      }
    }
        {if (true) return dimensions;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion arregloConstr(CtClass tipo) throws ParseException {
    if(debug) System.out.println("arregloConstr(" + tipo.getName() + ") --> ");

    Expresion[] listaExp = new Expresion[0];
    Expresion constr = new Expresion();
    ArrayList<Expresion> dimensions;
    CtClass tipo2;
    if (jj_2_57(10)) {
      jj_consume_token(LBrace);
      if (jj_2_56(10)) {
        listaExp = args();
      } else {
        ;
      }
      jj_consume_token(RBrace);
        constr = getArrayConstructorCode(listaExp, tipo);
        {if (true) return constr;}
    } else if (jj_2_58(10)) {
      tipo2 = tipoBase();
      dimensions = dclDimension();
        constr = getArrayTypeInit(dimensions.toArray(new Expresion[0]), tipo2);
        {if (true) return constr;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode subrango(int varForm, int access) throws ParseException {
    if(debug) System.out.println("subrango(" + varForm + "," + access + ") --> ");
    CtClass tipo;
    String desc;
    Expresion exp1, exp2;
    Bytecode result = new Bytecode(declaring.getConstPool());
    Variable var = new Variable();
    String exp1Desc, exp2Desc;
    Token tok;
    jj_consume_token(TSubrango);
    tipo = tipoBase();
    tok = jj_consume_token(id);
                                               if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
    jj_consume_token(TEq);
    jj_consume_token(LClosedBracket);
    exp1 = exp();
    jj_consume_token(TDotDotDot);
    exp2 = exp();
    jj_consume_token(RClosedBracket);
        try{
            var = new Variable(tok.image, classPool.get("compiler.Subrango"), varForm);
        }catch(NotFoundException nf){
            Errors.add("FATAL: Error al cargar la clase Subrango", getToken(0));
        }

        var.setBaseType(tipo);

        if(!currentScope.add(var)){
                Errors.add("Declaracion multiple para la variable \u005c"" + tok.image + "\u005c"",
                        getToken(0));
        }else{
            if(varForm == Variable.STATIC || varForm == Variable.FIELD){
                addClassField(var, varForm, access);
            }

            result = getSubrangoInitCode(var, varForm, exp1, exp2);
        }

        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode enumerado(int varForm, int access) throws ParseException {
    if(debug)  System.out.println("enumerado(" + varForm + "," + access + ") --> ");

    Bytecode result = new Bytecode(declaring.getConstPool());
    ArrayList<String> ids;
    Variable var = new Variable();
    FieldInfo campo;
    Expresion expr;
    Token tok;
    if (jj_2_60(10)) {
      jj_consume_token(TEnumerado);
      tok = jj_consume_token(id);
                              if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
      jj_consume_token(TEq);
      jj_consume_token(LClosedBracket);
      ids = listaIds();
      jj_consume_token(RClosedBracket);
        int cont = 1;

        for(String unId : ids){
            var = new Variable(unId, INTEGER_TYPE, varForm);
            var.setConstant(true);

            if(!currentScope.add(var)){
                Errors.add("Nombre duplicado: \u005c"" + unId + "\u005c". No puede declararse como constante",
                        getToken(0));
                break;
            }else{
                if(varForm == Variable.STATIC || varForm == Variable.FIELD){
                    addClassField(var, varForm, access);
                }

                if(Descriptor.of(INTEGER_TYPE).equals("I")){
                    result.addIconst(cont);
                }else{
                    result.addLconst(cont);
                }

                result = append(result, var.getStoreCode());
            }

            cont++;
        }

        {if (true) return result;}
    } else if (jj_2_61(10)) {
      jj_consume_token(TEnumerado);
      jj_consume_token(id);
      jj_consume_token(TEq);
      jj_consume_token(LClosedBracket);
      tok = jj_consume_token(id);
                     if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
      jj_consume_token(TEq);
      expr = exp();
            if(Descriptor.of(expr.getType()).equals(Descriptor.of(INTEGER_TYPE))){
                var = new Variable(tok.image, INTEGER_TYPE, varForm);
                var.setConstant(true);

                if(!currentScope.add(var)){
                    Errors.add("Nombre duplicado: \u005c"" + tok.image +
                            "\u005c". No puede declararse como constante", getToken(0));
                    //break ?
                }else{

                   if(varForm == Variable.STATIC || varForm == Variable.FIELD){
                        addClassField(var, varForm, access);
                    }

                    result = append(result, expr.getCode());
                    result = append(result, var.getStoreCode());
                }
            }else{
                Errors.add("Las expresiones de inicializaci\u00c3\u00b3n de enumerados deben ser " +
                        "de tipo entero", getToken(0));
               //break; ?
            }
      label_14:
      while (true) {
        if (jj_2_59(10)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(TComma);
        tok = jj_consume_token(id);
                               if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
        jj_consume_token(TEq);
        expr = exp();
            if(Descriptor.of(expr.getType()).equals(Descriptor.of(INTEGER_TYPE))){
                var = new Variable(tok.image, INTEGER_TYPE, varForm);
                var.setConstant(true);

                if(!currentScope.add(var)){
                    Errors.add("Nombre duplicado: \u005c"" + tok.image + "\u005c". No puede declararse " +
                            "como constante", getToken(0));
                    //break;
                }else{

                    if(varForm == Variable.STATIC || varForm == Variable.FIELD){
                        addClassField(var, varForm, access);
                    }

                    result = append(result, expr.getCode());
                    result = append(result, var.getStoreCode());
                }
            }else{
                Errors.add("Las expresiones de inicializaci\u00c3\u00b3n de enumerados deben ser de tipo entero",
                    getToken(0));
                //break;
            }
      }
      jj_consume_token(RClosedBracket);
            {if (true) return result;}

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode insSimple() throws ParseException {
    if(debug) System.out.println("insSimple() --> ");

    Bytecode code = new Bytecode(declaring.getConstPool());
    Expresion expr = new Expresion();
    if (jj_2_62(10)) {
      code = insAsignacion();
    } else if (jj_2_63(10)) {
      code = insEsc();
    } else if (jj_2_64(10)) {
      code = insLec();
    } else if (jj_2_65(10)) {
      expr = llamadaProc();
        code = expr.getCode();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return code;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode insLec() throws ParseException {
    if(debug) System.out.println("insLec() --> ");

    Bytecode bc = new Bytecode(declaring.getConstPool());
    Variable var;
    jj_consume_token(TLeer);
    jj_consume_token(LOpenBracket);
    var = varRefChain();
    jj_consume_token(ROpenBracket);
        bc = var.getReadCode();

        {if (true) return bc;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode insEsc() throws ParseException {
    if(debug) System.out.println("insEsc() --> ");

    Bytecode code = new Bytecode(declaring.getConstPool());
    Expresion expr;
    jj_consume_token(TEscribir);
    jj_consume_token(LOpenBracket);
    expr = exp();
    jj_consume_token(ROpenBracket);
        code = expr.getPrintln();

        {if (true) return code;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode insEstruc() throws ParseException {
    if(debug) System.out.println("insEstruc() --> ");

    Bytecode code;
    if (jj_2_66(10)) {
      code = insSi();
    } else if (jj_2_67(10)) {
      code = insMientras();
    } else if (jj_2_68(10)) {
      code = insRepetir();
    } else if (jj_2_69(10)) {
      code = insSeleccion();
    } else if (jj_2_70(10)) {
      code = insPara();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return code;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode insAsignacion() throws ParseException {
    if(debug) System.out.println("insASignacion() --> ");

    Expresion value = new Expresion();
    Bytecode code = new Bytecode(declaring.getConstPool());
    Variable var;
    var = varRefChain();
    jj_consume_token(TEq);
    value = exp();
        if(!var.isConstant()){

            if(compatibleTypes(var.getType(), value.getType())){

                code = append(code, var.getPreStoreCode());
                code = append(code, value.getCode());
                code = append(code, var.getStoreCode());
            }else{
                Errors.add("Asignaci\u00c3\u00b3n de tipo incompatible para \u005c"" + var.getName() +
                        "\u005c"\u005cnSe esperaba: "+Descriptor.of(var.getType()) + "\u005cnEncontro: " +
                        Descriptor.of(value.getType()), getToken(0));
            }
        }else{
            Errors.add("Intento de asignaci\u00c3\u00b3n para una constante \u005c"" + var.getName() +
                    "\u005c"", getToken(0));
        }

        {if (true) return code;}
    throw new Error("Missing return statement in function");
  }

  static final public Variable varRefChain() throws ParseException {
    if(debug) System.out.println("varRefChain() --> ");

    Variable result = new Variable();
    Variable aux = new Variable();
    result = varRef(null);
    label_15:
    while (true) {
      if (jj_2_71(10)) {
        ;
      } else {
        break label_15;
      }
      jj_consume_token(TDot);
      result = varRef(result);
    }
        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Variable varRef(Variable obj) throws ParseException {
    if(debug){
        if(obj == null){
            System.out.println("varRef(null) --> ");
        }else{
            System.out.println("varRef(" + obj.getName() + ") --> ");
        }

    }

    Expresion expResult = new Expresion();
    ArrayList<Expresion> accessExpr;

    Variable var = new Variable();
    if (jj_2_72(10)) {
      expResult = llamada(obj);
        var.setType(expResult.getType());
        var.appendLoadCode(expResult.getCode());
        var.setFunctionCall(true);
        // falta el store y el preStore

    } else if (jj_2_73(10)) {
      jj_consume_token(TTam);
        if(obj != null && obj.isArray()){
            Expresion result = obj.getSizeExpresion();
            {if (true) return result.makeVariable();}
        }else{
            Errors.add("La variable es nula o no posee tama\u00c3\u00b1o", getToken(0));
        }
    } else if (jj_2_74(10)) {
      var = varId(obj);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_75(10)) {
      accessExpr = dclDimension();
            var = var.getAccessCodes(accessExpr.toArray(new Expresion[0]));

            if(var == null){
                Errors.add("La variable no es un arreglo", getToken(0));
                var = new Variable();
            }
    } else {
      ;
    }
        {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public Variable vCampo(Variable obj) throws ParseException {
    if(debug){
        if(obj == null){
            System.out.println("vCampo(null) --> ");
        }else{
            System.out.println("vCampo(" + obj.getName() + ") --> ");
        }

    }

    Variable campo = new Variable();
    jj_consume_token(TDot);
    campo = varRef(obj);
        {if (true) return campo;}
    throw new Error("Missing return statement in function");
  }

  static final public Variable varId(Variable obj) throws ParseException {
    if(debug) {
        if(obj == null){
            System.out.println("varId(null) --> ");
        }else{
            System.out.println("varId(" + obj.getName() + ") -->");
        }
    }

    Variable var;
    Token tok;
    Expresion index, indexAccum;
    ArrayList<Expresion> exprs = new ArrayList<Expresion>();
    indexAccum = new Expresion();

    int arrayDimensions = 0;
    int proxIndex = 1;
    boolean isIndexed = false;
    String desc = new String();
    if (jj_2_76(10)) {
      jj_consume_token(TSelf);
        var = new Variable();
        var.setType(getCtClass(declaring.getName()));
        var.getLoadCode().addAload(0);
        var.getStoreCode().addAload(0);
        var.getPreStoreCode().addAload(0);
        // obtener el tipo de declaring, y poner load = store en 0

    } else if (jj_2_77(10)) {
      tok = jj_consume_token(id);
                 if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
        if(obj == null){    // Si es un objeto "raiz"
            var = currentScope.getVariable(tok.image);

            if(var == null){
                Errors.add("No se encontro la variable: " + tok.image, getToken(0));
            }else{
                /*if(var.getForm() == Variable.FIELD && var.getDeclaringClassName().equals(declaring.getName())){
                    Bytecode thisCode = new Bytecode(declaring.getConstPool());
                    thisCode.addAload(0);

                    var.preAppendPreStoreCode(thisCode);   
                    var.preAppendLoadCode(thisCode);
                }*/

            }

        }else{

            CtClass fieldType = obj.getFieldType(tok.image);
            if(fieldType != null){
                var = new Variable(tok.image, fieldType, Variable.FIELD);
                var.setDeclaringClassName(obj.getType().getName()); //????
                var.setObjectField(true);
                var.makeCodes(-1);

                var.preAppendPreStoreCode(obj.getLoadCode());
                var.preAppendLoadCode(obj.getLoadCode());

            }else{
                var = new Variable();
                Errors.add("No se consiguio el campo \u005c"" + tok.image + "\u005c" en el objeto "
                        + obj.getName(), getToken(0));
            }
        }

        if(var != null){

        }else{

            Errors.add("Simbolo indefinido: " + tok.image, getToken(0));
            var = new Variable(CtClass.voidType, Variable.LOCAL);
        }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion instanciacion() throws ParseException {
    if(debug)
        System.out.println("instanciacion() --> ");

    Expresion expr = new Expresion();
    Expresion[] argumentos = new Expresion[0];
    ArrayList<CtClass> types = new ArrayList<CtClass>();
    String desc;
    Token tok;
    jj_consume_token(TNuevo);
    tok = jj_consume_token(id);
                          if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
    jj_consume_token(LOpenBracket);
    if (jj_2_78(10)) {
      argumentos = args();
    } else {
      ;
    }
    jj_consume_token(ROpenBracket);
        for(Expresion arg : argumentos){
            types.add(arg.getType());
        }

        CtClass type = declaredTypes.get(tok.image);

        if(type != null){
            Bytecode argsCode = getInstantiationCode(type, argumentos);
            expr.appendCode(argsCode);
            expr.setType(type);
        }else{
            Errors.add("Instanciacion de clase desconocida: " + tok.image, getToken(0));
        }
        {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode insSi() throws ParseException {
    if(debug) System.out.println("insSi() --> ");

    Expresion expr;
    Bytecode bloque = new Bytecode(declaring.getConstPool());
    Bytecode elseb = null;

    IfCond cond;
    jj_consume_token(TSi);
    expr = exp();
    jj_consume_token(TEntonces);
    bloque = bloqueIns();
    if (jj_2_79(10)) {
      jj_consume_token(TSino);
      elseb = bloqueIns();
    } else {
      ;
    }
    jj_consume_token(TFSi);
        if(elseb == null){
            cond = new IfCond(expr, bloque);
        }else{
            cond = new IfCond(expr, bloque, elseb);
        }

        {if (true) return cond.getCode();}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode insMientras() throws ParseException {
    if(debug) System.out.println("insMientras() --> ");

    CicloMientras loop;
    Expresion expr;
    Bytecode bloque;

    currentScope = currentScope.createChild();
    jj_consume_token(TMientras);
    expr = exp();
    jj_consume_token(THacer);
    bloque = bloqueIns();
    jj_consume_token(TFMientras);
        loop = new CicloMientras(expr, bloque);

        currentScope = currentScope.destroyChild();
        {if (true) return loop.getCode();}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode insRepetir() throws ParseException {
    if(debug) System.out.println("Repetir() --> ");

    CicloRepetir loop;
    Bytecode bloque = new Bytecode(declaring.getConstPool());
    Expresion expr = new Expresion();
    Expresion expResult = new Expresion();

    currentScope = currentScope.createChild();
    jj_consume_token(TRepetir);
    bloque = bloqueIns();
    jj_consume_token(THasta);
    expr = exp();
    jj_consume_token(TSemicolon);
        loop = new CicloRepetir(bloque, expr);


        currentScope = currentScope.destroyChild();

        {if (true) return loop.getCode();}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode insSeleccion() throws ParseException {
    if(debug) System.out.println("insSeleccion() --> ");

    Bytecode bc = new Bytecode(declaring.getConstPool());
    jj_consume_token(TSeleccion);
    bc = bloqueSeleccion();
    jj_consume_token(TFSeleccion);
        {if (true) return bc;}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode bloqueSeleccion() throws ParseException {
    if(debug) System.out.println("bloqueSeleccion() --> ");

    Bytecode bloque;
    Expresion expBuff;

    ArrayList<Bytecode> listaBloques = new ArrayList<Bytecode>();
    ArrayList<Expresion> listaExp = new ArrayList<Expresion>();

    Expresion expResult = new Expresion();

    int selSize = 0;
    int expCount = 0;
    label_16:
    while (true) {
      expBuff = exp();
      jj_consume_token(TColon);
      bloque = bloqueIns();
        listaExp.add(expBuff);
        listaBloques.add(bloque);

        // index = exp + IFEQ + bloque + GOTO
        selSize = selSize + expBuff.getCode().getSize() + 3 + bloque.getSize() + 3;
        expCount++;
      if (jj_2_80(10)) {
        ;
      } else {
        break label_16;
      }
    }
        BloqueSeleccion select = new BloqueSeleccion(listaExp, listaBloques);
        {if (true) return select.getCode();}
    throw new Error("Missing return statement in function");
  }

  static final public Bytecode insPara() throws ParseException {
    if(debug) System.out.println("insPara() --> ");

    Bytecode bc = new Bytecode(declaring.getConstPool());
    Variable x;
    Expresion expr1, expr2;
    Expresion expr3 = null;
    Bytecode bloque;
    Token tok;
    CtClass tipo;
    CicloPara loop;
    jj_consume_token(TPara);
    tok = jj_consume_token(id);
                         if(debug) System.out.println("\u005c"" + tok.image + "\u005c" ");
    jj_consume_token(TEq);
    expr1 = exp();
    jj_consume_token(THasta);
    expr2 = exp();
    if (jj_2_81(10)) {
      jj_consume_token(TEn);
      expr3 = exp();
    } else {
      ;
    }
    jj_consume_token(THacer);
        currentScope = currentScope.createChild();

        x = new Variable(tok.image, expr1.getType(), Variable.LOCAL);

        if(!currentScope.add(x)){
            Errors.add("Error al crear indice de ciclo Para", getToken(0));
        }
    bloque = bloqueIns();
    jj_consume_token(TFPara);
        loop = new CicloPara(x, expr1, expr2, expr3, bloque);

        currentScope = currentScope.destroyChild();
        {if (true) return loop.getCode();}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion exp() throws ParseException {
    if(debug) System.out.println("exp() --> ");

    Expresion code = new Expresion();
    Expresion buff = new Expresion();
    String desc1, desc2;
    code = expY();
    label_17:
    while (true) {
      if (jj_2_82(10)) {
        ;
      } else {
        break label_17;
      }
      jj_consume_token(OpOr);
      buff = expY();
        desc1 = Descriptor.of(code.getType());
        desc2 = Descriptor.of(buff.getType());
        if(desc1.equals("Z") && desc2.equals("Z")){
            code.appendCode(buff.getCode());
            code.add(Bytecode.IOR);
        }else{
            Errors.add("Operador logico aplicado a expresiones no booleanas", getToken(0));
        }
    }
        {if (true) return code;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion expY() throws ParseException {
    if(debug) System.out.println("expY() --> ");

    Expresion code = new Expresion();
    Expresion buff = new Expresion();
    String desc1, desc2;
    code = expEq();
    label_18:
    while (true) {
      if (jj_2_83(10)) {
        ;
      } else {
        break label_18;
      }
      jj_consume_token(OpAnd);
      buff = expEq();
        desc1 = Descriptor.of(code.getType());
        desc2 = Descriptor.of(buff.getType());
        if(desc1.equals("Z") && desc2.equals("Z")){
            code.appendCode(buff.getCode());
            code.add(Bytecode.IAND);
        }else{
            Errors.add("Operador logico aplicado a expresiones no booleanas", getToken(0));
        }
    }
        {if (true) return code;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion expEq() throws ParseException {
    if(debug) System.out.println("expEq() --> ");

    Expresion expResult = new Expresion();
    Expresion exp1;
    Expresion exp2;
    Expresion exp2Copy = new Expresion();
    boolean first = true;
    String op;
    Token tok;
    expResult = expRel();
    label_19:
    while (true) {
      if (jj_2_84(10)) {
        ;
      } else {
        break label_19;
      }
      if (jj_2_85(10)) {
        tok = jj_consume_token(OpEq);
      } else if (jj_2_86(10)) {
        tok = jj_consume_token(OpNeq);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp2 = expRel();
            op = tok.image;
            if(first){
                exp1 = expResult;
            }else{
                exp1 = exp2Copy;
            }

            exp2Copy = new Expresion(exp2);
            exp1.compare(op, exp2);

            if(!first){
                expResult.appendCode(exp1.getCode());
                expResult.add(Bytecode.IAND);
            }

            first = false;
    }
        {if (true) return expResult;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion expRel() throws ParseException {
    if(debug) System.out.println("expRel() --> ");

    Expresion expResult = new Expresion();
    Expresion exp1;
    Expresion exp2;
    Expresion exp2Copy = new Expresion();
    boolean first = true;
    String op;
    expResult = expSum();
    label_20:
    while (true) {
      if (jj_2_87(10)) {
        ;
      } else {
        break label_20;
      }
      op = OpRel();
      exp2 = expSum();
        if(first){
            exp1 = expResult;
        }else{
            exp1 = exp2Copy;
        }

        exp2Copy = new Expresion(exp2);
        exp1.compare(op, exp2);

        if(!first){
            expResult.appendCode(exp1.getCode());
            expResult.add(Bytecode.IAND);
        }

        first = false;
    }
        {if (true) return expResult;}
    throw new Error("Missing return statement in function");
  }

  static final public String OpRel() throws ParseException {
    if(debug) System.out.println("OpRel() --> ");

    String rel;
    if (jj_2_88(10)) {
      jj_consume_token(OpLt);
               rel = "<";
    } else if (jj_2_89(10)) {
      jj_consume_token(OpLe);
               rel = "<=";
    } else if (jj_2_90(10)) {
      jj_consume_token(OpGt);
               rel = ">";
    } else if (jj_2_91(10)) {
      jj_consume_token(OpGe);
               rel = ">=";
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return rel;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion expSum() throws ParseException {
    if(debug) System.out.println("expSum() --> ");

    Expresion codeExp1 = new Expresion();
    Expresion codeExp2 = new Expresion();

    String opStr;
    codeExp1 = expMul();
    label_21:
    while (true) {
      if (jj_2_92(10)) {
        ;
      } else {
        break label_21;
      }
      opStr = OpSum();
      codeExp2 = expMul();
            codeExp1.operate(opStr, codeExp2);
    }
        {if (true) return codeExp1;}
    throw new Error("Missing return statement in function");
  }

  static final public String OpSum() throws ParseException {
    if(debug) System.out.println("OpSum() --> ");

    String op;
    if (jj_2_93(10)) {
      jj_consume_token(OpAdd);
        op = "+";
    } else if (jj_2_94(10)) {
      jj_consume_token(OpSub);
        op = "-";
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion expMul() throws ParseException {
    if(debug) System.out.println("expMul() --> ");

    Expresion exp1, exp2;
    Token tok;
    exp1 = expU();
    label_22:
    while (true) {
      if (jj_2_95(10)) {
        ;
      } else {
        break label_22;
      }
      tok = OpMult();
      exp2 = expU();
            exp1.operate(tok.image, exp2);
    }
        {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  static final public Token OpMult() throws ParseException {
    if(debug) System.out.println("OpMul() --> ");

    Token tok;
    if (jj_2_96(10)) {
      tok = jj_consume_token(OpMul);
    } else if (jj_2_97(10)) {
      tok = jj_consume_token(OpMod);
    } else if (jj_2_98(10)) {
      tok = jj_consume_token(OpDiv);
    } else if (jj_2_99(10)) {
      tok = jj_consume_token(OpFDiv);
    } else if (jj_2_100(10)) {
      tok = jj_consume_token(OpPow);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return tok;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion expU() throws ParseException {
    if(debug) System.out.println("expU() --> ");

    Expresion expResult = new Expresion();
    Bytecode bc = new Bytecode(declaring.getConstPool());   //para las operaciones unarias
    String op;
    String buff = new String();
    label_23:
    while (true) {
      if (jj_2_101(10)) {
        ;
      } else {
        break label_23;
      }
      op = opU();
          buff = op + buff ;
    }
    expResult = factor();
        for(int i = 0; i < buff.length(); i++){
            expResult.operate(buff.substring(i, i + 1));
        }

        {if (true) return expResult;}
    throw new Error("Missing return statement in function");
  }

  static final public String opU() throws ParseException {
    if(debug) System.out.println("opU() --> ");

    String op;
    if (jj_2_102(10)) {
      jj_consume_token(OpSub);
                  op = "-";
    } else if (jj_2_103(10)) {
      jj_consume_token(OpAdd);
                  op = "+";
    } else if (jj_2_104(10)) {
      jj_consume_token(OpFalse);
                  op = "!";
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion factor() throws ParseException {
    if(debug) System.out.println("factor() --> ");

    Bytecode bc = new Bytecode(declaring.getConstPool());
    CtClass tipo = CtClass.voidType;
    Constante con;
    Expresion expResult = new Expresion();
    Variable var;
    if (jj_2_105(10)) {
      expResult = defaultFunction();
    } else if (jj_2_106(10)) {
      var = varRefChain();
        expResult = var.makeExpresion();
        expResult.setVariable(true);
    } else if (jj_2_107(10)) {
      con = constante();
        bc = con.getCode();
        expResult.setType(con.getType());
        expResult.appendCode(bc);
    } else if (jj_2_108(10)) {
      expResult = instanciacion();
    } else if (jj_2_109(10)) {
      jj_consume_token(LOpenBracket);
      expResult = exp();
      jj_consume_token(ROpenBracket);
    } else if (jj_2_110(10)) {
      expResult = arregloConstr(CtClass.voidType);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return expResult;}
    throw new Error("Missing return statement in function");
  }

  static final public Expresion defaultFunction() throws ParseException {
    if(debug)
        System.out.println("defaultFunction() --> ");

    Expresion result = new Expresion();
    Expresion arg = new Expresion();
    Bytecode code = new Bytecode(declaring.getConstPool());
    CtClass returnType;
    Token tok;
    if (jj_2_111(10)) {
      tok = jj_consume_token(TRandom);
      jj_consume_token(LOpenBracket);
      jj_consume_token(ROpenBracket);
        // Función: aleatorio()

        code.addInvokestatic("java.lang.Math", "random", "()D");

        if(Descriptor.of(FLOAT_TYPE).equals("F")){
            code.add(Bytecode.D2F);
        }

        returnType = FLOAT_TYPE;
    } else if (jj_2_112(10)) {
      tok = jj_consume_token(TRound);
      jj_consume_token(LOpenBracket);
      arg = exp();
      jj_consume_token(ROpenBracket);
        // Función: redondear()

        code = arg.getCode();

        if(!compatibleTypes(arg.getType(), FLOAT_TYPE)){
            if(compatibleTypes(arg.getType(), CtClass.intType)){
                code.add(Bytecode.I2F);
            }else if(compatibleTypes(arg.getType(), CtClass.longType)){
                code.add(Bytecode.L2D);
            }else{
                Errors.add("Funcion de redondeo aplicada a un tipo incompatible. ", getToken(0));
            }

        }else{
            code.addInvokestatic("java.lang.Math", "round", "(" + Descriptor.of(FLOAT_TYPE) + ")" +
                Descriptor.of(INTEGER_TYPE));
        }

        returnType = INTEGER_TYPE;
    } else if (jj_2_113(10)) {
      tok = jj_consume_token(TCeil);
      jj_consume_token(LOpenBracket);
      arg = exp();
      jj_consume_token(ROpenBracket);
        // Función: techo()

        code = arg.getCode();

        if(!compatibleTypes(arg.getType(), FLOAT_TYPE)){
            if(compatibleTypes(arg.getType(), CtClass.intType)){
                code.add(Bytecode.I2D);
            }else if(compatibleTypes(arg.getType(), CtClass.longType)){
                code.add(Bytecode.L2D);
            }else{
                Errors.add("Funcion de techo aplicada a un tipo incompatible. ", getToken(0));
            }
        }else{
            if(Descriptor.of(FLOAT_TYPE).equals("F")){
                code.add(Bytecode.F2D);
            }

            code.addInvokestatic("java.lang.Math", "ceil", "(D)D");

            if(Descriptor.of(FLOAT_TYPE).equals("F")){
                code.add(Bytecode.D2F);
            }
        }

        returnType = FLOAT_TYPE;
    } else if (jj_2_114(10)) {
      tok = jj_consume_token(TSqrt);
      jj_consume_token(LOpenBracket);
      arg = exp();
      jj_consume_token(ROpenBracket);
        // Función: raiz()  // raiz cuadrada

        code = arg.getCode();

        if(!compatibleTypes(arg.getType(), FLOAT_TYPE)){
            if(compatibleTypes(arg.getType(), CtClass.intType)){
                code.add(Bytecode.I2D);
            }else if(compatibleTypes(arg.getType(), CtClass.longType)){
                code.add(Bytecode.L2D);
            }else{
                Errors.add("Funcion raiz cuadrada aplicada a un tipo incompatible. ", getToken(0));
            }
        }else{
            if(Descriptor.of(FLOAT_TYPE).equals("F")){
                code.add(Bytecode.F2D);
            }

            code.addInvokestatic("java.lang.Math", "sqrt", "(D)D");

            if(Descriptor.of(FLOAT_TYPE).equals("F")){
                code.add(Bytecode.D2F);
            }
        }

        returnType = FLOAT_TYPE;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        result.setType(returnType);
        result.appendCode(code);

        if(debug)
            System.out.println("\u005c"" + tok.image + "\u005c" ");

        {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  static final public Constante constante() throws ParseException {
    if(debug) System.out.println("constante() --> ");

    Token tok;
    Constante constant;
    if (jj_2_115(10)) {
      tok = jj_consume_token(cint);
        constant = new Constante(INTEGER_TYPE, tok.image);
    } else if (jj_2_116(10)) {
      tok = jj_consume_token(cfloat);
        constant = new Constante(FLOAT_TYPE, tok.image);
    } else if (jj_2_117(10)) {
      tok = jj_consume_token(TVerdad);
        constant = new Constante(CtClass.booleanType, tok.image);
    } else if (jj_2_118(10)) {
      tok = jj_consume_token(TFalso);
        constant = new Constante(CtClass.booleanType, tok.image);
    } else if (jj_2_119(10)) {
      tok = jj_consume_token(TNull);
        constant = new Constante(CtClass.voidType, tok.image);
    } else if (jj_2_120(10)) {
      tok = jj_consume_token(character);
        constant = new Constante(CtClass.charType, tok.image);
    } else if (jj_2_121(10)) {
      tok = jj_consume_token(string);
        CtClass clase = CtClass.voidType;
        try{
            clase = classPool.get("java.lang.String");
        }catch(NotFoundException e){
            Errors.add("FATAL: Error al cargar la clase java.lang.String", getToken(0));
        }

        constant = new Constante(clase, tok.image.substring(1, tok.image.length() - 1));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        if(debug){
            System.out.println("\u005c"" + tok.image + "\u005c" ");
        }
        {if (true) return constant;}
    throw new Error("Missing return statement in function");
  }

/**
* Reglas para la primera pasada (sólo declaraciones de tipos, clases y métodos 
*/
  static final public void pre_axiom() throws ParseException {
    if(debug) System.out.println("pre_axiom() --> ");
    label_24:
    while (true) {
      if (jj_2_122(10)) {
        ;
      } else {
        break label_24;
      }
      pre_dclTipo();
    }
    if (jj_2_123(10)) {
      pre_lClases();
    } else {
      ;
    }
    pre_ini();
  }

  static final public void pre_dclTipo() throws ParseException {
    if(debug) System.out.println("pre_dclTipo() --> ");
    if (jj_2_124(10)) {
      pre_registro();
    } else if (jj_2_125(10)) {
      pre_alias();
      jj_consume_token(TSemicolon);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void pre_registro() throws ParseException {
    if(debug) System.out.println("pre_registro() --> ");

    Token tok;
    ClassFile nuevaClase;
    CtClass tipo = CtClass.voidType;
    Bytecode initCode;
    jj_consume_token(TRegistro);
    tok = jj_consume_token(id);
    if (jj_2_126(10)) {
      jj_consume_token(TEq);
    } else {
      ;
    }
    skip_to("FRegistro");
    jj_consume_token(TFRegistro);
        if(pendingTypes.contains(tok.image)){
            pendingTypes.remove(tok.image);
        }else{
            if(!declaredTypes.exists(tok.image)){
                nuevaClase = createClass(tok.image);

                try{
                    tipo = classPool.get(tok.image);
                }catch(NotFoundException nf){
                    Errors.add("Error al cargar la clase " + tok.image +
                            " (" + nf.getMessage() + ")", getToken(0));
                    //nf.printStackTrace();
                }

                declaredTypes.add(tok.image, tipo);

                if (!addRegistry(tipo)){
                    Errors.add("Declaraci\u00c3\u00b3n duplicada o inv\u00c3\u00a1lida de registro: " +
                            tipo.getName(), getToken(0));
                }
            }else{
                Errors.add("Definici\u00c3\u00b3n duplicada de registro: " + tok.image);
            }
        }
  }

  static final public void pre_alias() throws ParseException {
    if(debug) System.out.println("pre_alias() --> ");

    Token tok;
    CtClass tipo;
    jj_consume_token(TTipo);
    tipo = tipoBase();
    jj_consume_token(TComo);
    tok = jj_consume_token(id);
        declaredTypes.add(tok.image, tipo);
  }

  static final public void pre_lClases() throws ParseException {
    if(debug) System.out.println("pre_lClases() --> ");
    label_25:
    while (true) {
      pre_clase();
      if (jj_2_127(10)) {
        ;
      } else {
        break label_25;
      }
    }
  }

  static final public void pre_clase() throws ParseException {
    if(debug) System.out.println("pre_clase() --> ");

    ClassFile nuevaClase;
    String nombre = new String();
    String nombreSuper = new String("");
    Bytecode atributosInit;     // ????
    ArrayList<MethodInfo> metodos = new ArrayList<MethodInfo>();
    Token tok;
    ClassFile superClass;
    String[] metodos_or_fclase = {"accion", "funcion", "fclase"};
    jj_consume_token(TClase);
    tok = jj_consume_token(id);
      nombre = new String(tok.image);
    if (jj_2_128(10)) {
      nombreSuper = herencia();
    } else {
      ;
    }
        nuevaClase = getOrCreateClass(nombre);
        declaring = nuevaClase;

        if(!nombreSuper.equals(""))
        {
            if(declaredTypes.exists(nombreSuper)){
                superClass = getClassFile(nombreSuper);
            }else{
            // Si la clase heredada no está definida, la pre-declara y la marca como tipo pendiente
                superClass = createClass(nombreSuper);
                try{
                    declaredTypes.add(nombreSuper, classPool.get(nombreSuper));
                }catch(NotFoundException nf){
                    Errors.add("Error al crear clase: " + nombreSuper, getToken(0));
                }
                pendingTypes.add(nombreSuper);
            }

            try{
                nuevaClase.setSuperclass(superClass.getName());
            }catch(CannotCompileException e){
                // No debería suceder
                Errors.add("No se consigui\u00c3\u00b3 la superclase \u005c"" + nombreSuper
                        + "\u005c" (" + e.getMessage() + ")", getToken(0));
            }
        }

        try{
            // Si la clase ya fue definida de forma adelantada,
            // la elimina de la lista de tipos pendientes
            if(pendingTypes.contains(nuevaClase.getName())){
                pendingTypes.remove(nuevaClase.getName());
            }else{
                declaredTypes.add(nuevaClase.getName(), classPool.get(nuevaClase.getName()));
            }
        }catch(NotFoundException nf){
            //this should never happen
            Errors.add("No se consigui\u00c3\u00b3 la clase "+ nuevaClase.getName() +
                    "(" + nf.getMessage() + ")", getToken(0));
        }
    skip_to_tokens(metodos_or_fclase);
    if (jj_2_129(10)) {
      pre_metodos();
    } else {
      ;
    }
    jj_consume_token(TFClase);
        declaring = null;
  }

  static final public void pre_metodos() throws ParseException {
    if(debug) System.out.println("pre_metodos() --> ");
    int access = AccessFlag.PUBLIC;
    label_26:
    while (true) {
      if (jj_2_132(10)) {
        if (jj_2_130(10)) {
          access = acceso();
        } else {
          ;
        }
        pre_funcion(access);
      } else if (jj_2_133(10)) {
        if (jj_2_131(10)) {
          access = acceso();
        } else {
          ;
        }
        pre_accion(access);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_134(10)) {
        ;
      } else {
        break label_26;
      }
    }
  }

  static final public void pre_funcion(int access) throws ParseException {
    if(debug) System.out.println("pre_funcion() --> ");
    pre_funcionIni(access);
    skip_to("FFuncion");
    jj_consume_token(TFFuncion);
  }

  static final public void pre_funcionIni(int accessFlags) throws ParseException {
    if(debug) System.out.println("pre_funcionIni() --> ");

    Token tok;
    CtClass tipo;
    Parametro parametros[] = new Parametro[0];
    CtClass[] paramTypes = new CtClass[0];
    jj_consume_token(TFuncion);
    tok = jj_consume_token(id);
    jj_consume_token(LOpenBracket);
    parametros = listaParam();
    jj_consume_token(ROpenBracket);
    jj_consume_token(TColon);
    tipo = tipoGeneral();
        /* Bloque de Parámetros */
        int paramCount = parametros.length;
        paramTypes = new CtClass[paramCount];

        for(int i = 0; i < paramCount; i++){
            paramTypes[i] = parametros[i].getType();
        }
        /* Fin de bloque de parámetros */

        String paramDesc = Descriptor.ofParameters(paramTypes);

        MethodInfo unaFuncion = new MethodInfo(declaring.getConstPool(), tok.image, paramDesc + Descriptor.of(tipo));
        unaFuncion.setAccessFlags(accessFlags);

        try{
            declaring.addMethod(unaFuncion);
        }catch(DuplicateMemberException e){
            Errors.add("Definicion duplicada para la funci\u00c3\u00b3n: \u005c"" + unaFuncion.getName() + "\u005c"",
                getToken(0));
        }
  }

  static final public void pre_accion(int access) throws ParseException {
    if(debug) System.out.println("pre_accion() --> ");
    pre_accionIni(access);
    skip_to("FAccion");
    jj_consume_token(TFAccion);
  }

  static final public void pre_accionIni(int accessFlags) throws ParseException {
    if(debug) System.out.println("pre_accionIni() --> ");

    Parametro parametros[] = new Parametro[0];
    CtClass[] paramTypes = new CtClass[0];
    Token tok;
    jj_consume_token(TAccion);
    tok = jj_consume_token(id);
    jj_consume_token(LOpenBracket);
    parametros = listaParam();
    jj_consume_token(ROpenBracket);
        /* Bloque de Parámetros */
        int paramCount = parametros.length;
        paramTypes = new CtClass[paramCount];

        for(int i = 0; i < paramCount; i++){
            paramTypes[i] = parametros[i].getType();
        }
        /* Fin de bloque de parámetros */

        String paramDesc = Descriptor.ofParameters(paramTypes);

        MethodInfo unaAccion = new MethodInfo(declaring.getConstPool(), tok.image, paramDesc + "V");
        unaAccion.setAccessFlags(accessFlags);

        try{
            declaring.addMethod(unaAccion);
        }catch(DuplicateMemberException e){
            Errors.add("Definicion duplicada para la acci\u00c3\u00b3n: \u005c"" + unaAccion.getName() + "\u005c"",
                getToken(0));
        }
  }

  static final public void pre_ini() throws ParseException {
    if(debug) System.out.println("pre_ini() --> ");

    ClassFile initClass = createClass("InitClass");
    initClass.setAccessFlags(AccessFlag.STATIC);
    declaring = initClass;
    jj_consume_token(TPrograma);
    pre_dcls(Variable.STATIC);
    pre_prog();
    jj_consume_token(TFPrograma);
  }

  static final public void pre_dcls(int varForm) throws ParseException {
    if(debug) System.out.println("pre_dcls() --> ");

    String[] procedure_def = {"accion", "funcion", "accion principal"};
    skip_to_tokens(procedure_def);
    label_27:
    while (true) {
      if (jj_2_135(10)) {
        ;
      } else {
        break label_27;
      }
      pre_dclFun(AccessFlag.STATIC);
    }
  }

  static final public void pre_dclFun(int accessFlags) throws ParseException {
    if(debug) System.out.println("pre_dclFun() --> ");
    if (jj_2_136(10)) {
      pre_funcion(accessFlags);
    } else if (jj_2_137(10)) {
      pre_accion(accessFlags);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void pre_prog() throws ParseException {
    if(debug){
        System.out.println("pre_prog() --> ");
    }
    jj_consume_token(TAccionPrincipal);
    if (jj_2_138(10)) {
      jj_consume_token(LOpenBracket);
      jj_consume_token(ROpenBracket);
    } else {
      ;
    }
    skip_to("FAccion");
    jj_consume_token(TFAccion);
        declaring = null;
  }

  static final public void deleteClassFiles() throws ParseException {
    if(debug){
        System.out.println("deleteClassFiles() --> ");
    }
    delete_all_classes();
    jj_consume_token(0);
  }

  static void skip() throws ParseException {
  Token tok = getNextToken();
  }

  static void skip_to(String target) throws ParseException {
  Token tok;

  while (true) {
    tok = getToken(1);
    if (tok.image.equalsIgnoreCase(target)){
        break;
    }

    tok = getNextToken();
  }
  }

  static void skip_to_tokens(String[] target) throws ParseException {
  Token tok;

  while (true) {
    tok = getToken(1);

    for(int x = 0; x < target.length; x++) {
        if (tok.image.equalsIgnoreCase(target[x])){
            return;
        }
    }

    tok = getNextToken();
  }
  }

  static void delete_all_classes() throws ParseException {
    Token tok = getNextToken();
    Token cname;

    while (tok.kind != 0){   //Mientras el token actual sea distinto de <EOF>

        if(tok.image.equalsIgnoreCase("Clase")){
            cname = getToken(1);
            File fl = new File(cname + ".class");
            if (fl.exists()) {
                fl.delete();
                System.out.println(cname + ".class deleted.");
            }
        }
        tok = getNextToken();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  static private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  static private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  static private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  static private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  static private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  static private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  static private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  static private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  static private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  static private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  static private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  static private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  static private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  static private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  static private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  static private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  static private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  static private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  static private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  static private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  static private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  static private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  static private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  static private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  static private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  static private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  static private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  static private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  static private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  static private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  static private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  static private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  static private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  static private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  static private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  static private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  static private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  static private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  static private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  static private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  static private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  static private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  static private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  static private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  static private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  static private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  static private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  static private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  static private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  static private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  static private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  static private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  static private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  static private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  static private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  static private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  static private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  static private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  static private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  static private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  static private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  static private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  static private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  static private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  static private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  static private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(TEscribir)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3_109() {
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3_110() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3_108() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(TFuncion)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_3R_104()) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    if (jj_scan_token(TColon)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3_107() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  static private boolean jj_3_106() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    if (jj_3_16()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(TLeer)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_105() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_3R_102()) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  static private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3_107()) {
    jj_scanpos = xsp;
    if (jj_3_108()) {
    jj_scanpos = xsp;
    if (jj_3_109()) {
    jj_scanpos = xsp;
    if (jj_3_110()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(TSeleccion)) return true;
    if (jj_3R_100()) return true;
    if (jj_scan_token(TFSeleccion)) return true;
    return false;
  }

  static private boolean jj_3_131() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(TRetornar)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_130() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_131()) jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(TProtegido)) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_130()) jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_132()) {
    jj_scanpos = xsp;
    if (jj_3_133()) return true;
    }
    return false;
  }

  static private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    return false;
  }

  static private boolean jj_3R_90() {
    Token xsp;
    if (jj_3_134()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(TPrivado)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(TPublico)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3_104() {
    if (jj_scan_token(OpFalse)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(TRepetir)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(THasta)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(TSemicolon)) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3_103() {
    if (jj_scan_token(OpAdd)) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_102() {
    if (jj_scan_token(OpSub)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3_103()) {
    jj_scanpos = xsp;
    if (jj_3_104()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_129() {
    if (jj_3R_90()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    if (jj_scan_token(TSemicolon)) return true;
    return false;
  }

  static private boolean jj_3_101() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(TMientras)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(THacer)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(TFMientras)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_101()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_53()) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    Token xsp;
    if (jj_3_7()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(TConstante)) return true;
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_scan_token(TComma)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(TEq)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_100() {
    if (jj_scan_token(OpPow)) return true;
    return false;
  }

  static private boolean jj_3_99() {
    if (jj_scan_token(OpFDiv)) return true;
    return false;
  }

  static private boolean jj_3_98() {
    if (jj_scan_token(OpDiv)) return true;
    return false;
  }

  static private boolean jj_3_97() {
    if (jj_scan_token(OpMod)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(TSemicolon)) return true;
    return false;
  }

  static private boolean jj_3_96() {
    if (jj_scan_token(OpMul)) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_96()) {
    jj_scanpos = xsp;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3_100()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  static private boolean jj_3_79() {
    if (jj_scan_token(TSino)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(TSi)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(TEntonces)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_79()) jj_scanpos = xsp;
    if (jj_scan_token(TFSi)) return true;
    return false;
  }

  static private boolean jj_3_128() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(TExtends)) return true;
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(TClase)) return true;
    if (jj_scan_token(id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_128()) jj_scanpos = xsp;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) return true;
    }
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) jj_scanpos = xsp;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(TEq)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_95() {
    if (jj_3R_78()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3_78() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(TSemicolon)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_scan_token(TEnumerado)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(TEq)) return true;
    if (jj_scan_token(LClosedBracket)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(TEq)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_59()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RClosedBracket)) return true;
    return false;
  }

  static private boolean jj_3_127() {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    Token xsp;
    if (jj_3_127()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_127()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(TNuevo)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_78()) jj_scanpos = xsp;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(TTipo)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(TComo)) return true;
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_94() {
    if (jj_scan_token(OpSub)) return true;
    return false;
  }

  static private boolean jj_3_93() {
    if (jj_scan_token(OpAdd)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3_94()) return true;
    }
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(TSemicolon)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(TSemicolon)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(TSemicolon)) return true;
    return false;
  }

  static private boolean jj_3_126() {
    if (jj_scan_token(TEq)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_scan_token(TEnumerado)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(TEq)) return true;
    if (jj_scan_token(LClosedBracket)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(RClosedBracket)) return true;
    return false;
  }

  static private boolean jj_3_92() {
    if (jj_3R_76()) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(TTipo)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(TComo)) return true;
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(TRegistro)) return true;
    if (jj_scan_token(id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_126()) jj_scanpos = xsp;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  static private boolean jj_3_123() {
    if (jj_3R_86()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_91() {
    if (jj_scan_token(OpGe)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_90() {
    if (jj_scan_token(OpGt)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_89() {
    if (jj_scan_token(OpLe)) return true;
    return false;
  }

  static private boolean jj_3_88() {
    if (jj_scan_token(OpLt)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_70() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_125() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(TSemicolon)) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_124()) {
    jj_scanpos = xsp;
    if (jj_3_125()) return true;
    }
    return false;
  }

  static private boolean jj_3_124() {
    if (jj_3R_87()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(TSubrango)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(TEq)) return true;
    if (jj_scan_token(LClosedBracket)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(TDotDotDot)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(RClosedBracket)) return true;
    return false;
  }

  static private boolean jj_3_77() {
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3_122() {
    if (jj_3R_85()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_70()) return true;
    if (jj_scan_token(TFAccion)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(TClase)) return true;
    if (jj_scan_token(id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_scan_token(TFClase)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(TSemicolon)) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    Token xsp;
    if (jj_3_29()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_76() {
    if (jj_scan_token(TSelf)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) return true;
    }
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_3R_53()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_87() {
    if (jj_3R_74()) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_75()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    }
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_scan_token(LBrace)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) jj_scanpos = xsp;
    if (jj_scan_token(RBrace)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(TEq)) return true;
    return false;
  }

  static private boolean jj_3_121() {
    if (jj_scan_token(string)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    if (jj_3_3()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_120() {
    if (jj_scan_token(character)) return true;
    return false;
  }

  static private boolean jj_3_119() {
    if (jj_scan_token(TNull)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(TRegistro)) return true;
    if (jj_scan_token(id)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    if (jj_scan_token(TFRegistro)) return true;
    return false;
  }

  static private boolean jj_3_118() {
    if (jj_scan_token(TFalso)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_117() {
    if (jj_scan_token(TVerdad)) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_scan_token(LClosedBracket)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) jj_scanpos = xsp;
    if (jj_scan_token(RClosedBracket)) return true;
    return false;
  }

  static private boolean jj_3_116() {
    if (jj_scan_token(cfloat)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    if (jj_3_55()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_115() {
    if (jj_scan_token(cint)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(TAccion)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_3R_104()) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) {
    jj_scanpos = xsp;
    if (jj_3_119()) {
    jj_scanpos = xsp;
    if (jj_3_120()) {
    jj_scanpos = xsp;
    if (jj_3_121()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_86() {
    if (jj_scan_token(OpNeq)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(TComma)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_85() {
    if (jj_scan_token(OpEq)) return true;
    return false;
  }

  static private boolean jj_3_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3_86()) return true;
    }
    if (jj_3R_73()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_138() {
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_75() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_74() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_96()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3_73() {
    if (jj_scan_token(TTam)) return true;
    return false;
  }

  static private boolean jj_3_72() {
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3_137() {
    if (jj_3R_92()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_136()) {
    jj_scanpos = xsp;
    if (jj_3_137()) return true;
    }
    return false;
  }

  static private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_75()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_136() {
    if (jj_3R_91()) return true;
    return false;
  }

  static private boolean jj_3_83() {
    if (jj_scan_token(OpAnd)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_scan_token(TArreglo)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(TDe)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(TEq)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_scan_token(TArreglo)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(TDe)) return true;
    if (jj_3R_53()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    return false;
  }

  static private boolean jj_3_135() {
    if (jj_3R_93()) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_70()) return true;
    if (jj_scan_token(TFFuncion)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3_114() {
    if (jj_scan_token(TSqrt)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3_81() {
    if (jj_scan_token(TEn)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_71() {
    if (jj_scan_token(TDot)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3_51() {
    if (jj_scan_token(TComma)) return true;
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_82() {
    if (jj_scan_token(OpOr)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_71()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(id)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_82()) return true;
    return false;
  }

  static private boolean jj_3_113() {
    if (jj_scan_token(TCeil)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_99()) return true;
    if (jj_scan_token(id)) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(TAccion)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_3R_104()) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(TFuncion)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_3R_104()) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    if (jj_scan_token(TColon)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_82()) return true;
    if (jj_scan_token(TEq)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_scan_token(LClosedBracket)) return true;
    if (jj_scan_token(RClosedBracket)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(TPara)) return true;
    if (jj_scan_token(id)) return true;
    if (jj_scan_token(TEq)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(THasta)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_81()) jj_scanpos = xsp;
    if (jj_scan_token(THacer)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(TFPara)) return true;
    return false;
  }

  static private boolean jj_3_112() {
    if (jj_scan_token(TRound)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_3R_44()) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_53()) return true;
    Token xsp;
    if (jj_3_50()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(TComma)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_3R_103()) return true;
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  static private boolean jj_3_70() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3_69() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3_67() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3_111() {
    if (jj_scan_token(TRandom)) return true;
    if (jj_scan_token(LOpenBracket)) return true;
    if (jj_scan_token(ROpenBracket)) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_111()) {
    jj_scanpos = xsp;
    if (jj_3_112()) {
    jj_scanpos = xsp;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3_114()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_66() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_scan_token(TCadena)) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(TCaracter)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_94()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(TReal)) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(TEntero)) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(TLogico)) return true;
    return false;
  }

  static private boolean jj_3_80() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(TColon)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    Token xsp;
    if (jj_3_80()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PseudoTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[138];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Pseudo(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Pseudo(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PseudoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Pseudo(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PseudoTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Pseudo(PseudoTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PseudoTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[102];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 102; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 138; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
